import requests
from bs4 import BeautifulSoup
import numpy as np
import random
import matplotlib.pyplot as plt

data_count = [
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "20",
    "0",
    "0",
    "0",
    "0",
    "0",
    "5",
    "0",
    "0",
    "9",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "2",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "4",
    "0",
    "0",
    "0",
    "0",
    "0",
    "4",
    "5",
    "5",
    "3",
    "0",
    "0",
    "0",
    "2",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "7",
    "4",
    "12",
    "9",
    "5",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "3",
    "0",
    "0",
    "0",
    "16",
    "0",
    "6",
    "11",
    "7",
    "0",
    "4",
    "5",
    "0",
    "0",
    "0",
    "3",
    "0",
    "6",
    "7",
    "2",
    "0",
    "0",
    "0",
    "0",
    "4",
    "0",
    "0",
    "0",
    "0",
    "2",
    "0",
    "0",
    "4",
    "0",
    "0",
    "0",
    "2",
    "1",
    "5",
    "1",
    "3",
    "0",
    "3",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "5",
    "1",
    "0",
    "0",
    "0",
    "5",
    "1",
    "2",
    "4",
    "1",
    "2",
    "0",
    "0",
    "0",
    "1",
    "5",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "9",
    "2",
    "6",
    "7",
    "8",
    "0",
    "0",
    "6",
    "9",
    "0",
    "3",
    "6",
    "8",
    "0",
    "0",
    "0",
    "0",
    "2",
    "7",
    "0",
    "1",
    "1",
    "0",
    "1",
    "0",
    "3",
    "0",
    "0",
    "0",
    "6",
    "1",
    "2",
    "2",
    "0",
    "0",
    "3",
    "2",
    "0",
    "0",
    "3",
    "3",
    "1",
    "0",
    "5",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "4",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "9",
    "4",
    "0",
    "1",
    "0",
    "0",
    "3",
    "1",
    "6",
    "0",
    "3",
    "0",
    "0",
    "2",
    "0",
    "4",
    "0",
    "0",
    "0",
    "0",
    "1",
    "3",
    "4",
    "3",
    "2",
    "0",
    "0",
]
data_level = [
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "4",
    "0",
    "0",
    "0",
    "0",
    "0",
    "2",
    "0",
    "0",
    "4",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "2",
    "0",
    "0",
    "0",
    "0",
    "0",
    "2",
    "2",
    "2",
    "2",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "3",
    "2",
    "4",
    "4",
    "2",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "2",
    "0",
    "0",
    "0",
    "4",
    "0",
    "3",
    "4",
    "3",
    "0",
    "2",
    "2",
    "0",
    "0",
    "0",
    "2",
    "0",
    "3",
    "3",
    "1",
    "0",
    "0",
    "0",
    "0",
    "2",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "2",
    "0",
    "0",
    "0",
    "1",
    "1",
    "2",
    "1",
    "2",
    "0",
    "2",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "2",
    "1",
    "0",
    "0",
    "0",
    "2",
    "1",
    "1",
    "2",
    "1",
    "1",
    "0",
    "0",
    "0",
    "1",
    "2",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "4",
    "1",
    "3",
    "3",
    "3",
    "0",
    "0",
    "3",
    "4",
    "0",
    "2",
    "3",
    "3",
    "0",
    "0",
    "0",
    "0",
    "1",
    "3",
    "0",
    "1",
    "1",
    "0",
    "1",
    "0",
    "2",
    "0",
    "0",
    "0",
    "3",
    "1",
    "1",
    "1",
    "0",
    "0",
    "2",
    "1",
    "0",
    "0",
    "2",
    "2",
    "1",
    "0",
    "2",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "2",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "4",
    "2",
    "0",
    "1",
    "0",
    "0",
    "2",
    "1",
    "3",
    "0",
    "2",
    "0",
    "0",
    "1",
    "0",
    "2",
    "0",
    "0",
    "0",
    "0",
    "1",
    "2",
    "2",
    "2",
    "1",
    "0",
    "0",
]

# SCRAPER
def get_user_contributions(user):
    """
    Function that given a github profile, returns the cuantity of contributions that the user has made
    """

    url = f"https://github.com/{user}"
    r = requests.get(url)
    soup = BeautifulSoup(r.text, "html.parser")

    # Search for all tags call 'rect'
    contributions = soup.find_all("rect")
    # print(contributions)

    dates = []
    data_count = []
    data_level = []
    for i in range(len(contributions)):
        # Delete what's not usefull
        if "data-count" not in contributions[i].attrs:
            continue
        else:
            # Add the data to some list's
            dates.append(contributions[i]["data-date"])
            data_count.append(contributions[i]["data-count"])
            data_level.append(contributions[i]["data-level"])

    return dates, data_count, data_level


# GRAPH GENERATOR
def star_generator(data):
    """
    Function that given a list of contributions generate a graph of it
    """

    # Generate the principal matrix which will be graphed
    stars = []
    weeks = 52
    days = 7
    rows_day = 2
    cols_day = 2
    for week in range(weeks):
        for day in range(days):
            # Here we define the value of how many starts we need to generate that day
            # Then we add it to a list in a random order
            level = int(data[day + days * week])
            stars_cuantity = rows_day * cols_day / 6 * (level + 1)
            day_stars = []
            for i in range(rows_day * cols_day):
                if i <= stars_cuantity:
                    day_stars.append(1)
                else:
                    day_stars.append(0)
            random.shuffle(day_stars)

            day_matrix = []
            for row in range(rows_day):
                row_matrix = []

                for col in range(cols_day):
                    row_matrix.append(day_stars[row * cols_day + col])

                day_matrix.append(row_matrix)
            stars.append(day_matrix)

    stars_matrix = []
    column = []
    column2 = []
    cont = 0
    for day in stars:
        if cont % 7 == 0:
            stars_matrix.append(column)
            stars_matrix.append(column2)

        column.append(day[0][0])
        column.append(day[1][0])
        column2.append(day[0][1])
        column2.append(day[1][1])

        cont += 1

    return stars_matrix


def stars_graph(stars_matrix):
    plt.scatter(stars_matrix)
    plt.show()

    # # y list
    # y = []
    # for i in range(len(stars_matrix[0])):
    #     y.append(i)

    # cont = 0

    # for week in stars_matrix:
    #     print(week)
    #     # Añade la lista week a un grafico, week es el eje X e y es el eje Y.
    #     for i in range(len(week)):
    #         if cont % 2 == 0:
    #             week[i] += 1

    #     plt.scatter(week, y, s=4)  # ,'ro'
    #     cont += 1
    # plt.show()


def generate_plot(dates, data):
    """
    Function that given a list of contributions generate a graph of it
    """

    # Se crea una matriz de ceros de tamaño len(data_level)/7 x 7
    data_matrix = np.zeros((int(len(data_level) / 7), 7))
    # Se llena la matriz con los datos de data_count
    for i in range(len(data_level)):
        try:
            data_matrix[int(i / 7), i % 7] = data_level[i]

        except:  # NO SE LLENA LA MATRIZ COMPLETA, OJO!!!!!
            break

    # Se crea una figura y una subfigura
    fig, ax = plt.subplots()
    # Se grafica la matriz
    ax.imshow(data_matrix)
    ax.set_title("Contribuciones")
    ax.set_xlabel("Dias")
    ax.set_ylabel("Semana")
    # Se agrega el label a cada celda
    for i in range(len(data)):
        ax.text(i % 7, int(i / 7), data[i], ha="center", va="center", color="w")
    plt.show()


# FUNCTION CALL
# dates, data_count, data_level = get_user_contributions("satelerd")

stars_matrix = star_generator(data_level)

stars_graph(stars_matrix)
# grafica(stars_list)
